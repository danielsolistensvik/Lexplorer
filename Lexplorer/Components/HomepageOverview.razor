@using GraphQL
@using Lexplorer.Helpers
@using Lexplorer.Models
@using System.Diagnostics
@inject Lexplorer.Services.LoopringGraphQLService LoopringGraphQLService;
@inject Lexplorer.Services.UniswapGraphQLService UniswapGraphQLService;
@inject NavigationManager NavigationManager;
@inject IAppCache AppCache;

@if (blockData == null && transactionData == null && pairsData == null && uniswapTokens == null)
{
    <br />
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (blockData != null && transactionData != null && pairsData != null && uniswapTokens != null)
{

    <MudGrid>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Transactions</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data!.proxy!.transactionCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Blocks</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@blockData.data!.proxy!.blockCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total L2 Accounts</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@blockData.data!.proxy!.userCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Average Block Time</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@averageBlockTime mins</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Average Transactions per Block</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@averageTransactions</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Last Block Submitted</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@lastBlockSubmittedTime mins ago</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Mint Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data!.proxy!.nftMintCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Trade Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data!.proxy!.tradeNFTCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Transfer Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data!.proxy!.transferNFTCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem sm="6">
            <MudTable Dense="true" Items="@blockData.data!.blocks" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Latest Blocks</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Block ID</MudTh>
                    <MudTh>L1 Transaction Hash</MudTh>
                    <MudTh>Block Size</MudTh>
                    <MudTh>Verified At (UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Block Id"><a Class="mud-theme-primary" href="blocks/@context.id?pageNumber=0">@context.id</a></MudTd>
                    <MudTd DataLabel="L1 Tx"><a Class="mud-theme-primary" href="https://etherscan.io/tx/@context.txHash" target="_blank">@context.txHash!.Substring(0,15)...</a></MudTd>
                    <MudTd DataLabel="Block Size">@context.blockSize</MudTd>
                    <MudTd DataLabel="Timestamp">@TimestampToUTCConverter.Convert(@context.timestamp!)</MudTd>
                </RowTemplate>
            </MudTable>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="GoToBlockOverviewPage">View more blocks</MudButton>
        </MudItem>
        <MudItem sm="6">
            <MudTable Dense="true" Items="@transactionData.data!.transactions" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Latest Transactions</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Tx Id</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Fee</MudTh>
                    <MudTh>Verified At (UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Transaction Id"><a Class="mud-theme-primary" href=@ParameterHelper.ConvertToTransactionLink(@context.typeName!, @context.id!)>@context.id</a></MudTd>
                    <MudTd DataLabel="Type">@context.typeName</MudTd>
                    <TransactionTableDetails TransactionData=@context />
                    <MudTd DataLabel="Timestamp">@TimestampToUTCConverter.Convert(@blockData.data!.blocks![0].timestamp!)</MudTd>
                </RowTemplate>
            </MudTable>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="GoToTransactionOverviewPage">View more transactions</MudButton>
        </MudItem>
    </MudGrid>
     <MudGrid>
        <MudItem sm="6">
            <MudTable Dense="true" Items="@pairsData.data!.pairs" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Pairs</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Pair</MudTh>
                    <MudTh>Volume 24H</MudTh>
                    <MudTh>Volume 7D</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Pair">@context.token0!.symbol/@context.token1!.symbol</MudTd>
                    <MudTd DataLabel="Volume 24H">$@TokenAmountConverter.ToStringWithExponent(@context.dailyEntities![0].tradedVolumeToken1Swap, @context.token1!.decimals, uniswapTokens!.Where(c => c.address! == @context.token1!.address).First()!.data!.tokenDayDatas![0].priceUSD) </MudTd>
                    <MudTd DataLabel="Volume 7D">$@TokenAmountConverter.ToStringWithExponent(@context.weeklyEntities![0].tradedVolumeToken1Swap, @context.token1!.decimals, uniswapTokens!.Where(c => c.address! == @context.token1!.address).First()!.data!.tokenDayDatas![0].priceUSD) </MudTd>
                </RowTemplate>
            </MudTable>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="GoToPairOverviewPage">View more pairs</MudButton>
        </MudItem>
    </MudGrid>
}

@code
{
    private Blocks? blockData;
    private Transactions? transactionData;
    private Pairs? pairsData;
    private List<UniswapToken>? uniswapTokens;

    private double averageBlockTime;
    private long averageTransactions;
    private double lastBlockSubmittedTime;

    protected override async Task OnInitializedAsync()
    {
        string blockCacheKey = $"homepage-block";
        blockData = await AppCache.GetOrAddAsync(blockCacheKey, async () => await LoopringGraphQLService.GetBlocks(0, 10), DateTimeOffset.UtcNow.AddMinutes(10));
        string transactionCacheKey = $"homepage-transaction";
        transactionData = await AppCache.GetOrAddAsync(transactionCacheKey, async () => await LoopringGraphQLService.GetTransactions(0, 10), DateTimeOffset.UtcNow.AddMinutes(10));
        string pairsCacheKey = $"homepage-pairs";
        pairsData = await AppCache.GetOrAddAsync(pairsCacheKey, async () => await LoopringGraphQLService.GetPairs(), DateTimeOffset.UtcNow.AddHours(1));
        int pairCount = 0;
        foreach(var pair in pairsData!.data!.pairs!)
        {
            string uniSwapTokenCache = $"homepage-uniswapToken-{pair!.token1!.address!}";
            var uniswapToken = await AppCache.GetOrAddAsync(uniSwapTokenCache, async () => await UniswapGraphQLService.GetTokenPrice(pair!.token1!.address!), DateTimeOffset.UtcNow.AddHours(1));
            if(uniswapToken != null && pairCount == 0)
            {
                uniswapTokens = new List<UniswapToken>();
                uniswapTokens!.Add(uniswapToken!);
            }
            else
            {
                uniswapTokens!.Add(uniswapToken!);
            }
            pairCount++;
        }
        CalculateAverageBlockTime();
        CalculateLastBlockSubmitted();
        StateHasChanged();
    }

    private void CalculateAverageBlockTime()
    {
        long transactionCount = 0;
        long currentTime = DateTimeOffset.Now.ToUnixTimeSeconds();
        List<long> timeBetweenBlocks = new List<long>();
        foreach (var block in blockData!.data!.blocks!)
        {
            transactionCount += block.transactionCount;
            timeBetweenBlocks.Add(currentTime - Int64.Parse(block.timestamp!));
            currentTime = Int64.Parse(block.timestamp!);
        }
        averageTransactions = transactionCount / blockData.data.blocks.Count;
        averageBlockTime = Math.Floor(timeBetweenBlocks.Average() / 60);
    }

    private void CalculateLastBlockSubmitted()
    {
        long currentTime = DateTimeOffset.Now.ToUnixTimeSeconds();
        long timeSinceLastBlock = currentTime - Int64.Parse(blockData!.data!.blocks![0].timestamp!);
        lastBlockSubmittedTime = Math.Floor((double)timeSinceLastBlock / 60);
    }

    private void GoToBlockOverviewPage()
    {
        string parameters = "blocks?pageNumber=0";
        NavigationManager.NavigateTo(parameters);
    }

private void GoToPairOverviewPage()
    {
        string parameters = "pairs?pageNumber=0";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToTransactionOverviewPage()
    {
        string parameters = "transactions?pageNumber=0";
        NavigationManager.NavigateTo(parameters);
    }


}
