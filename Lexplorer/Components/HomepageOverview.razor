@using GraphQL
@using Lexplorer.Helpers
@using Lexplorer.Models
@using System.Diagnostics
@inject Lexplorer.Services.GraphQLService GraphQLService;
@inject NavigationManager NavigationManager;

@if (blockData == null && transactionData == null)
{
    <br />
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (blockData != null && transactionData != null)
{

    <MudGrid>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Transactions</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data.proxy.transactionCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Blocks</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@blockData.data.proxy.blockCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total L2 Accounts</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@blockData.data.proxy.userCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Average Block Time</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@averageBlockTime mins</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Average Transactions per Block</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@averageTransactions</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Last Block Submitted</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@lastBlockSubmittedTime mins ago</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Mint Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data.proxy.nftMintCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Trade Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data.proxy.tradeNFTCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Transfer Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data.proxy.transferNFTCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem sm="6">
            <MudTable Dense="true" Items="@blockData.data.blocks" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Latest Blocks</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Block ID</MudTh>
                    <MudTh>L1 Transaction Hash</MudTh>
                    <MudTh>Block Size</MudTh>
                    <MudTh>Time(UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Block Id"><a Class="mud-theme-primary" href="blocks/@context.id?pageNumber=0">@context.id</a></MudTd>
                    <MudTd DataLabel="L1 Tx"><a Class="mud-theme-primary" href="https://etherscan.io/tx/@context.txHash" target="_blank">@context.txHash.Substring(0,15)...</a></MudTd>
                    <MudTd DataLabel="Block Size">@context.blockSize</MudTd>
                    <MudTd DataLabel="Timestamp">@TimestampToUTCConverter.Convert(@context.timestamp)</MudTd>
                </RowTemplate>
            </MudTable>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="GoToBlockOverviewPage">View more blocks</MudButton>
        </MudItem>
        <MudItem sm="6">
            <MudTable Dense="true" Items="@transactionData.data.transactions" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Latest Transactions</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Tx Id</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Fee</MudTh>
                    <MudTh>Time(UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Transaction Id"><a Class="mud-theme-primary" href=@ParameterHelper.ConvertToTransactionLink(@context.typeName,@context.id)>@context.id</a></MudTd>
                    <MudTd DataLabel="Type">@context.typeName</MudTd>
                    <TransactionTableDetails TransactionData=@context />
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
}

@code
{
    private Blocks blockData;
    private Transactions transactionData;

    private double averageBlockTime;
    private long averageTransactions;
    private double lastBlockSubmittedTime;

    protected override async Task OnInitializedAsync()
    {
        blockData = await GraphQLService.GetBlocks(0, 10);
        transactionData = await GraphQLService.GetTransactions(0, 10);
        CalculateAverageBlockTime();
        CalculateLastBlockSubmitted();
        StateHasChanged();
    }

    private void CalculateAverageBlockTime()
    {
        long transactionCount = 0;
        long currentTime = DateTimeOffset.Now.ToUnixTimeSeconds();
        List<long> timeBetweenBlocks = new List<long>();
        foreach (var block in blockData.data.blocks)
        {
            transactionCount += Int64.Parse(block.transactionCount);
            timeBetweenBlocks.Add(currentTime - Int64.Parse(block.timestamp));
            currentTime = Int64.Parse(block.timestamp);
        }
        averageTransactions = transactionCount / blockData.data.blocks.Count;
        averageBlockTime = Math.Floor(timeBetweenBlocks.Average() / 60);
    }

    private void CalculateLastBlockSubmitted()
    {
        long currentTime = DateTimeOffset.Now.ToUnixTimeSeconds();
        long timeSinceLastBlock = currentTime - Int64.Parse(blockData.data.blocks[0].timestamp);
        lastBlockSubmittedTime = Math.Floor((double)timeSinceLastBlock / 60);
    }

    private void GoToBlockOverviewPage()
    {
        string parameters = "blocks?pageNumber=0";
        NavigationManager.NavigateTo(parameters);
    }


}
