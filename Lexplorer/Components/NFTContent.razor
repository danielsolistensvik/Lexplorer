@using Lexplorer.Models;

@if (showImageSource())
{
    <img src="@nftMetadata?.imageURL" Width="@width" Height="@height" />
}

@if (hasAnimationContent("video"))
{
    <video width="@width" height="@height" controls>
        <source src="@nftMetadata?.animationURL">
        Your browser does not support the video tag.
    </video>
}
else if (hasAnimationContent("audio"))
{
    <br />
    <audio controls>
        <source src="@nftMetadata?.animationURL">
        Your browser does not support the audio element.
    </audio>
}
else if (hasAnimationContent("image"))
{
    <img src="@nftMetadata?.animationURL" Width="@width" Height="@height" />
}
else if (hasAnimationContent("model"))
{
<style>
        model-viewer {
            width: @ToPx(width);
            height: @ToPx(height);
        }
</style>
    <model-viewer bounds="tight" enable-pan autoplay src="@nftMetadata?.animationURL" ar ar-modes="webxr scene-viewer quick-look"
                  camera-controls environment-image="neutral" poster="@nftMetadata?.imageURL" shadow-intensity="1"/>
}


@code {
    [Parameter]
    public NftMetadata? nftMetadata { get; set; }

    [Parameter]
    public int width { get; set; } = 512;

    [Parameter]
    public int height { get; set; } = 512;

    private string ToPx(int size)
    {
        return size.ToString() + "px";
    }

    private bool showImageSource()
    {
        //we show the image as long as there is no explicit animation URL - except for audio
        return (!hasAnimationURL()) || (nftMetadata?.contentType?.Contains("audio") ?? false);
    }

    private bool hasAnimationURL()
    {
        if (String.IsNullOrEmpty(nftMetadata?.animation_url)) return false;
        return nftMetadata?.image != nftMetadata?.animation_url;
    }

    private bool hasAnimationContent(string ContentTypeContains)
    {
        return (hasAnimationURL()) && (nftMetadata?.contentType?.Contains(ContentTypeContains) ?? false);
    }

}

