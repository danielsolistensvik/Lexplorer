@using Lexplorer.Helpers;
@using Lexplorer.Models;
@using System.Globalization;

@switch(TransactionData!.typeName)
{
    case "Deposit":
        <MudTd DataLabel="From Address">@AccountLinkHelper.CreateUserLink(deposit!.toAccount!.id!, deposit!.toAccount!.address!)</MudTd>
        <MudTd DataLabel="To Address">@AccountLinkHelper.CreateUserLink(deposit!.toAccount!.id! ,deposit!.toAccount!.address!)</MudTd>
        <MudTd DataLabel="Amount">@Decimal.Parse(@TokenAmountConverter.ToString(deposit!.amount, deposit!.token!.decimals),NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint).ToString("N4") @deposit!.token!.symbol</MudTd>
        <MudTd DataLabel="Fee"></MudTd>
        break;
    case "OrderbookTrade":
        <MudTd DataLabel="From Address">@AccountLinkHelper.CreateUserLink(orderBookTrade!.accountA!, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@AccountLinkHelper.CreateUserLink(orderBookTrade!.accountB!, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="Amount">@Decimal.Parse(@TokenAmountConverter.ToString(orderBookTrade!.fillBA, orderBookTrade!.tokenB!.decimals),NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint).ToString("N4") @orderBookTrade.tokenB.symbol</MudTd>
        @if(orderBookTrade!.feeA > 0)
        {
            <MudTd DataLabel="Fee">@Decimal.Parse(TokenAmountConverter.ToString(orderBookTrade!.feeA, orderBookTrade.tokenB!.decimals), NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint) @orderBookTrade.tokenB.symbol</MudTd>
        }
        else if(orderBookTrade!.feeB > 0)
        {
            <MudTd DataLabel="Fee">@Decimal.Parse(TokenAmountConverter.ToString(orderBookTrade!.feeB, orderBookTrade.tokenA!.decimals), NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint) @orderBookTrade.tokenA.symbol</MudTd>
        }
        break;
    case "Transfer":
        <MudTd DataLabel="From Address">@AccountLinkHelper.CreateUserLink(transfer!.fromAccount!, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@AccountLinkHelper.CreateUserLink(transfer!.toAccount!, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="Amount">@Decimal.Parse(@TokenAmountConverter.ToString(transfer!.amount!, transfer.token!.decimals),NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint).ToString("N4") @transfer.token.symbol</MudTd>
        <MudTd DataLabel="Fee">@Decimal.Parse(TokenAmountConverter.ToString(transfer!.fee!, transfer.feeToken!.decimals), NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint) @transfer.feeToken.symbol</MudTd>
        break;
    case "Swap":
        <MudTd DataLabel="From Address">@AccountLinkHelper.CreateUserLink(swap!.account!, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@AccountLinkHelper.CreateUserLink(swap!.pool!, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="Amount">@TokenAmountConverter.ToString(swap!.fillBA, swap.tokenB!.decimals) @swap.tokenB.symbol</MudTd>
        if (swap!.feeA > 0)
        {
            <MudTd DataLabel="Fee">@TokenAmountConverter.ToString(swap!.feeA, swap.tokenB!.decimals) @swap.tokenB.symbol</MudTd>
        }
        else if (swap.feeB > 0)
        {
            <MudTd DataLabel="Fee">@TokenAmountConverter.ToString(swap!.feeB, swap.tokenA!.decimals) @swap.tokenA.symbol</MudTd>
        }
        break;
    default:
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        break;
}

@code {
    [Parameter]
    public Transaction? TransactionData { get; set; }
    public OrderBookTrade? orderBookTrade { get { return TransactionData as OrderBookTrade; } }
    public Swap? swap { get { return TransactionData as Swap; } }
    public Transfer? transfer { get { return TransactionData as Transfer; } }
    public Deposit? deposit { get { return TransactionData as Deposit; } }
    [Parameter]
    public string? ignoreUserIDForLink { get; set; }
}
