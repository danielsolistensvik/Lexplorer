@using Lexplorer.Helpers;
@using Lexplorer.Models;
@using Lexplorer.Components;
@using System.Globalization;

@switch (TransactionData?.typeName)
{
    case "Deposit":
        <MudTd DataLabel="From Address"><L1AccountLink address="@deposit?.toAccount?.address" /></MudTd>
        <MudTd DataLabel="To Address">@LinkHelper.CreateUserLink(deposit?.toAccount, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="Bought" Style="text-align:right">@TokenAmountConverter.ToString(deposit?.amount, deposit?.token?.decimals) @deposit?.token?.symbol</MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        break;
    case "Withdrawal":
        <MudTd DataLabel="From Address">@LinkHelper.CreateUserLink(withdrawal?.fromAccount, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address"><L1AccountLink address="@withdrawal?.fromAccount?.address" /></MudTd>
        <MudTd></MudTd>
        <MudTd DataLabel="Sold" Style="text-align:right">@TokenAmountConverter.ToString(withdrawal?.amount, withdrawal?.token?.decimals) @deposit?.token?.symbol</MudTd>
        <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(withdrawal?.fee, withdrawal?.feeToken?.decimals) @withdrawal?.feeToken?.symbol</MudTd>
        break;
    case "OrderbookTrade":
        <MudTd DataLabel="From Address">@LinkHelper.CreateUserLink(orderBookTrade?.accountA, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@LinkHelper.CreateUserLink(orderBookTrade?.accountB, ignoreUserIDForLink)</MudTd>
        @if (ignoreUserIDForLink == orderBookTrade?.accountB?.id)
        {
            @* did we receive the transfer? no fees for us*@
            <MudTd DataLabel="Bought" Style="text-align:right">@TokenAmountConverter.ToString(orderBookTrade?.fillBB, orderBookTrade?.tokenA?.decimals) @orderBookTrade?.tokenA?.symbol</MudTd>
            <MudTd DataLabel="Sold" Style="text-align:right">@TokenAmountConverter.ToString(orderBookTrade?.fillSB, orderBookTrade?.tokenB?.decimals) @orderBookTrade?.tokenB?.symbol</MudTd>
            <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(orderBookTrade?.feeB, orderBookTrade?.tokenA?.decimals) @orderBookTrade?.tokenA?.symbol</MudTd>
        }
        else
        {
            <MudTd DataLabel="Bought" Style="text-align:right">@TokenAmountConverter.ToString(orderBookTrade?.fillBA, orderBookTrade?.tokenB?.decimals) @orderBookTrade?.tokenB?.symbol</MudTd>
            <MudTd DataLabel="Sold" Style="text-align:right">@TokenAmountConverter.ToString(orderBookTrade?.fillSA, orderBookTrade?.tokenA?.decimals) @orderBookTrade?.tokenA?.symbol</MudTd>
            @if (orderBookTrade?.feeA > 0)
            {
                <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(orderBookTrade?.feeA, orderBookTrade?.tokenB?.decimals) @orderBookTrade?.tokenB?.symbol</MudTd>
            }
            else
            {
                <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(orderBookTrade?.feeB, orderBookTrade?.tokenA?.decimals) @orderBookTrade?.tokenA?.symbol</MudTd>
            }
        }
        break;
    case "Transfer":
        <MudTd DataLabel="From Address">@LinkHelper.CreateUserLink(transfer?.fromAccount, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@LinkHelper.CreateUserLink(transfer?.toAccount, ignoreUserIDForLink)</MudTd>
        @if (ignoreUserIDForLink == transfer?.toAccount?.id)
        {
            @* did we receive the transfer? no fees for us*@
            <MudTd DataLabel="Bought" Style="text-align:right">@TokenAmountConverter.ToString(transfer?.amount, transfer?.token?.decimals) @transfer?.token?.symbol</MudTd>
            <MudTd></MudTd>
            <MudTd></MudTd>
        }
        else
        {
            <MudTd></MudTd>
            <MudTd DataLabel="Sold" Style="text-align:right">@TokenAmountConverter.ToString(transfer?.amount, transfer?.token?.decimals) @transfer?.token?.symbol</MudTd>
            <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(transfer?.fee, transfer?.feeToken?.decimals) @transfer?.feeToken?.symbol</MudTd>
        }
        break;
    case "Swap":
        <MudTd DataLabel="From Address">@LinkHelper.CreateUserLink(swap?.account, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@LinkHelper.CreateUserLink(swap?.pool, ignoreUserIDForLink)</MudTd>
        @if (ignoreUserIDForLink == swap?.pool?.id)
        {
            @* are we the pool? Pool never pays fees, no swap exists with feeB > 0!!! *@
            <MudTd DataLabel="Bought" Style="text-align:right">@TokenAmountConverter.ToString(swap?.fillBB, swap?.tokenA?.decimals) @swap?.tokenA?.symbol</MudTd>
            <MudTd DataLabel="Sold" Style="text-align:right">@TokenAmountConverter.ToString(swap?.fillSB, swap?.tokenB?.decimals) @swap?.tokenB?.symbol</MudTd>
            <MudTd></MudTd>
        }
        else
        {
            <MudTd DataLabel="Bought" Style="text-align:right">@TokenAmountConverter.ToString(swap?.fillBA, swap?.tokenB?.decimals) @swap?.tokenB?.symbol</MudTd>
            <MudTd DataLabel="Sold" Style="text-align:right">@TokenAmountConverter.ToString(swap?.fillSA, swap?.tokenA?.decimals) @swap?.tokenA?.symbol</MudTd>
            <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(swap?.feeA, swap?.tokenB?.decimals) @swap?.tokenB?.symbol</MudTd>
        }
        break;
    case "MintNFT":
        <MudTd DataLabel="From Address">@LinkHelper.CreateUserLink(mintNFT?.minter, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@LinkHelper.CreateUserLink(mintNFT?.receiver, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="Bought" Style="text-align:right">@mintNFT?.amount.ToString() NFT</MudTd>
        <MudTd></MudTd>
        <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(mintNFT?.fee, mintNFT?.feeToken?.decimals) @mintNFT?.feeToken?.symbol</MudTd>
        break;
    case "TransferNFT":
        <MudTd DataLabel="From Address">@LinkHelper.CreateUserLink(transferNFT?.fromAccount, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@LinkHelper.CreateUserLink(transferNFT?.toAccount, ignoreUserIDForLink)</MudTd>
        @if (ignoreUserIDForLink == transferNFT?.fromAccount?.id)
        {
            @* receiver always pays fee?! *@
            <MudTd></MudTd>
            <MudTd DataLabel="Sold" Style="text-align:right">@transferNFT?.amount.ToString() NFT</MudTd>
            <MudTd></MudTd>
        }
        else
        {
            <MudTd DataLabel="Bought" Style="text-align:right">@transferNFT?.amount.ToString() NFT</MudTd>
            <MudTd></MudTd>
            <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(transferNFT?.fee, transferNFT?.feeToken?.decimals) @transferNFT?.feeToken?.symbol</MudTd>
        }
        break;
    case "WithdrawalNFT":
        <MudTd DataLabel="From Address">@LinkHelper.CreateUserLink(withdrawalNFT?.fromAccount, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address"><L1AccountLink address="@withdrawalNFT?.fromAccount?.address" /></MudTd>
        <MudTd></MudTd>
        <MudTd DataLabel="Sold" Style="text-align:right">@withdrawalNFT?.amount.ToString() NFT</MudTd>
        <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(withdrawalNFT?.fee, withdrawalNFT?.feeToken?.decimals) @withdrawalNFT?.feeToken?.symbol</MudTd>
        break;
    case "TradeNFT":
        <MudTd DataLabel="From Address">@LinkHelper.CreateUserLink(tradeNFT?.accountSeller, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@LinkHelper.CreateUserLink(tradeNFT?.accountBuyer, ignoreUserIDForLink)</MudTd>
        @if (ignoreUserIDForLink == tradeNFT?.accountBuyer?.id)
        {
            <MudTd DataLabel="Bought" Style="text-align:right">@tradeNFT?.fillBB.ToString() NFT</MudTd>
            <MudTd DataLabel="Sold" Style="text-align:right">@TokenAmountConverter.ToString(tradeNFT?.realizedNFTPrice, tradeNFT?.token?.decimals) @tradeNFT?.token?.symbol</MudTd>
            <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(tradeNFT?.feeBuyer, tradeNFT?.token?.decimals) @tradeNFT?.token?.symbol</MudTd>
        }
        else
        {
            <MudTd DataLabel="Bought" Style="text-align:right">@TokenAmountConverter.ToString(tradeNFT?.realizedNFTPrice, tradeNFT?.token?.decimals) @tradeNFT?.token?.symbol</MudTd>
            <MudTd DataLabel="Sold" Style="text-align:right">@tradeNFT?.fillSA.ToString() NFT</MudTd>
            <MudTd DataLabel="Fee" Style="text-align:right">@TokenAmountConverter.ToString(tradeNFT?.feeSeller, tradeNFT?.token?.decimals) @tradeNFT?.token?.symbol</MudTd>
        }
        break;
    default:
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        break;
}

@code {
    [Parameter]
    public Transaction? TransactionData { get; set; }
    public OrderBookTrade? orderBookTrade { get { return TransactionData as OrderBookTrade; } }
    public Swap? swap { get { return TransactionData as Swap; } }
    public Transfer? transfer { get { return TransactionData as Transfer; } }
    public Deposit? deposit { get { return TransactionData as Deposit; } }
    public Withdrawal? withdrawal { get { return TransactionData as Withdrawal; } }
    public MintNFT? mintNFT { get { return TransactionData as MintNFT; } }
    public TransferNFT? transferNFT { get { return TransactionData as TransferNFT; } }
    public WithdrawalNFT? withdrawalNFT { get { return TransactionData as WithdrawalNFT; } }
    public TradeNFT? tradeNFT { get { return TransactionData as TradeNFT; } }

    [Parameter]
    public string? ignoreUserIDForLink { get; set; }
}
