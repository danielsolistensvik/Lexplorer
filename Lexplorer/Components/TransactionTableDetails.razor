@using Lexplorer.Helpers;
@using Lexplorer.Models;
@using System.Globalization;

@switch(TransactionData.typeName)
{
    case "OrderbookTrade":
        <MudTd DataLabel="From Address">@AccountLinkHelper.CreateUserLink(TransactionData.accountA, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@AccountLinkHelper.CreateUserLink(TransactionData.accountB, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="Amount">@Decimal.Parse(@TokenAmountConverter.Convert(TransactionData.fillBA, TransactionData.tokenB.decimals),NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint).ToString("N4") @TransactionData.tokenB.symbol</MudTd>
        @if(Double.Parse(TransactionData.feeA) > 0)
        {
            <MudTd DataLabel="Fee">@Decimal.Parse(TokenAmountConverter.Convert(TransactionData.feeA, TransactionData.tokenB.decimals), NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint) @TransactionData.tokenB.symbol</MudTd>
        }
        else if(Double.Parse(TransactionData.feeB) > 0)
        {
            <MudTd DataLabel="Fee">@Decimal.Parse(TokenAmountConverter.Convert(TransactionData.feeB, TransactionData.tokenA.decimals), NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint) @TransactionData.tokenA.symbol</MudTd>
        }
        break;
    case "Transfer":
        <MudTd DataLabel="From Address">@AccountLinkHelper.CreateUserLink(TransactionData.fromAccount, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@AccountLinkHelper.CreateUserLink(TransactionData.toAccount, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="Amount">@Decimal.Parse(@TokenAmountConverter.Convert(TransactionData.amount, TransactionData.token.decimals),NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint).ToString("N4") @TransactionData.token.symbol</MudTd>
        <MudTd DataLabel="Fee">@Decimal.Parse(TokenAmountConverter.Convert(TransactionData.fee, TransactionData.feeToken.decimals), NumberStyles.AllowExponent | NumberStyles.AllowDecimalPoint) @TransactionData.feeToken.symbol</MudTd>
        break;
    case "Swap":
        <MudTd DataLabel="From Address">@AccountLinkHelper.CreateUserLink(TransactionData.account, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="To Address">@AccountLinkHelper.CreateUserLink(TransactionData.pool, ignoreUserIDForLink)</MudTd>
        <MudTd DataLabel="Amount">@TokenAmountConverter.Convert(TransactionData.fillBA, TransactionData.tokenB.decimals) @TransactionData.tokenB.symbol</MudTd>
        if (Double.Parse(TransactionData.feeA) > 0)
        {
            <MudTd DataLabel="Fee">@TokenAmountConverter.Convert(TransactionData.feeA, TransactionData.tokenB.decimals) @TransactionData.tokenB.symbol</MudTd>
        }
        else if (Double.Parse(TransactionData.feeB) > 0)
        {
            <MudTd DataLabel="Fee">@TokenAmountConverter.Convert(TransactionData.feeB, TransactionData.tokenA.decimals) @TransactionData.tokenA.symbol</MudTd>
        }
        break;
    default:
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        break;
}

@code {
    [Parameter]
    public Transaction TransactionData { get; set; }
    [Parameter]
    public string? ignoreUserIDForLink { get; set; }
}
