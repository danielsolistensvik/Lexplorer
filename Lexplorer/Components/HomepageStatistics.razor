@using GraphQL
@using Lexplorer.Models
@using System.Diagnostics
@inject Lexplorer.Services.GraphQLService GraphQLService;
@if(blockData != null && transactionData != null)
{
    <MudGrid>
        <MudItem xs="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Transactions</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@transactionData.data.proxy.transactionCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Blocks</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@blockData.data.proxy.blockCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="4">
            <MudCard>
               <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total L2 Accounts</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@blockData.data.proxy.userCount</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Average Block Time</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@averageBlockTime mins</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Average Transactions per Block</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@averageTransactions</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="4">
            <MudCard>
               <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Last Block Submitted</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@lastBlockSubmittedTime mins ago</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h6">Latest Blocks</MudText>
            <MudTable Items="@blockData.data.blocks" Hover="true">
                <HeaderContent>
                    <MudTh>Block ID</MudTh>
                    <MudTh>L1 Transaction Hash</MudTh>
                    <MudTh>Block Size</MudTh>
                    <MudTh>Time(UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Block Id">@context.id</MudTd>
                    <MudTd DataLabel="L1 Tx"><a Class="mud-theme-primary" href="https://etherscan.io/tx/@context.txHash" target="_blank">@context.txHash.Substring(0,15)...</a></MudTd>
                    <MudTd DataLabel="Block Size">@context.blockSize</MudTd>
                    <MudTd DataLabel="Timestamp">@ConvertTimestampToUTC(@context.timestamp)</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
        <MudItem xs="6">
            <MudText Typo="Typo.h6">Latest Transactions</MudText>
            <MudTable Items="@transactionData.data.transactions" Hover="true">
                <HeaderContent>
                    <MudTh>Tx Id</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Fee</MudTh>
                    <MudTh>Time(UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Block Id">@context.id</MudTd>
                    <MudTd DataLabel="Type">@context.__typename</MudTd>
                    <TransactionTableDetails TransactionData=@context/>
            </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>

}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}

@code 
{
    private Blocks blockData;
    private Transactions transactionData;

    private double averageBlockTime;
    private long averageTransactions;
    private double lastBlockSubmittedTime;

    protected override async Task OnInitializedAsync()
    {
        blockData = await GraphQLService.GetBlocks();
        transactionData = await GraphQLService.GetTransactions();
        CalculateAverageBlockTime();
        CalculateLastBlockSubmitted();
    }



    private void CalculateAverageBlockTime()
    {
        long transactionCount = 0;
        long currentTime = DateTimeOffset.Now.ToUnixTimeSeconds();
        List<long> timeBetweenBlocks = new List<long>();
        foreach(var block in blockData.data.blocks)
        {
            transactionCount += Int64.Parse(block.transactionCount);
            timeBetweenBlocks.Add(currentTime - Int64.Parse(block.timestamp));
            currentTime = Int64.Parse(block.timestamp);
        }
        averageTransactions = transactionCount / blockData.data.blocks.Count;
        averageBlockTime = Math.Floor(timeBetweenBlocks.Average() / 60);
    }

    private void CalculateLastBlockSubmitted()
    {
        long currentTime = DateTimeOffset.Now.ToUnixTimeSeconds();
        long timeSinceLastBlock = currentTime - Int64.Parse(blockData.data.blocks[0].timestamp);
        lastBlockSubmittedTime = Math.Floor((double)timeSinceLastBlock / 60);
    }

    private string ConvertTimestampToUTC(string unixTimeStamp )
    {
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds(Double.Parse(unixTimeStamp)).ToLocalTime().ToUniversalTime();
        return dateTime.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'");
    }
}
