@page "/nfts/{nftId}"
@using System.Diagnostics
@inject IAppCache AppCache;
@inject NavigationManager NavigationManager;
@inject LoopringGraphQLService LoopringGraphQLService;
@inject EthereumService EthereumService;
@inject NftMetadataService NftMetadataService;
@inject IDialogService DialogService;

<PageTitle>The Lexplorer - NFT @nft?.nftID </PageTitle>

<MudSimpleTable Dense="true" Striped="true" Bordered="true">
    <tbody>
        <tr>
            <td colspan="2">
                <div class="mud-toolbar mud-toolbar-gutters mud-table-toolbar">
                    <MudText Typo="Typo.h6">@(nftMetadata?.name ?? $"NFT {nft?.nftID}")</MudText>
                </div>
            </td>
        </tr>
        <tr>
            <td>Description</td>
            <td>@nftMetadata?.description</td>
        </tr>
        <tr>
            <td>NFT type</td>
            <td>@nft?.nftTypeName</td>
        </tr>
        <tr>
            <td>Royalty percentage</td>
            <td>@nftMetadata?.royalty_percentage%</td>
        </tr>
        <tr>
            <td>nftID</td>
            <td Style="word-break:break-all;">@nft?.nftID</td>
        </tr>
        <tr>
            <td>Minter</td>
            <td Style="word-break:break-all;">@LinkHelper.CreateUserLink(nft?.minter, false, true) </td>
        </tr>
        <tr>
            <td>Minted at</td>
            <td Style="word-break:break-all;">@LinkHelper.GetObjectLink(nft?.mintedAtTransaction) </td>
        </tr>
        <tr>
            <td>Minted amount</td>
            <td Style="word-break:break-all;">@nft?.mintedAtTransaction?.amount</td>
        </tr>
        <tr>
            <td>Token address</td>
            <td Style="word-break:break-all;"><L1AccountLink address="@nft?.token" shortenAddress="false" /></td>
        </tr>
        <tr>
            <td>Image URL</td>
            <td Style="word-break:break-all;">@nftMetadata?.image</td>
        </tr>
        <tr>
            <td>Animation URL</td>
            <td Style="word-break:break-all;">@nftMetadata?.animation_url</td>
        </tr>
        @if (nftMetadata?.attributes?.Count > 0)
        {
            <tr>
                <td colspan="2">
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="Traits">
                            <MudSimpleTable Dense="true" Striped="true" Bordered="true">
                                <tbody>
                                    @foreach (var trait in nftMetadata?.attributes!)
                                    {
                                        <tr>
                                            <td>@trait.trait_type</td>
                                            <td>@trait.value</td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </td>
            </tr>
        }
        <tr>
            <td colspan="2">
                <NFTContent nftMetadata="@nftMetadata" />
            </td>
        </tr>
        @if ((nft?.token ?? nftMetadata?.JSONContent) != null)
        {
            <tr>
                <td colspan="2">
                    @if (nft?.token != null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="goToCollectionPage" Class="mr-2">View collection</MudButton>
                    }
                    @if (nftMetadata?.JSONContent != null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="showJSON" Class="mr-2">View Metadata</MudButton>
                    }
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<br />

<MudTable Dense="true" Striped="true" Bordered="true" Items="@transactions" Hover="true" Loading=@isLoading>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Transactions</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.FirstPage" Disabled=@(gotoPage == 1) OnClick="@(() => gotoPage = 1)" />
        <MudIconButton Icon="@Icons.Filled.NavigateBefore" Disabled=@(gotoPage == 1) OnClick="@(() => gotoPage -= 1)" />
        <MudNumericField HideSpinButtons="true" @bind-Value="gotoPage" Label="Page" Variant="Variant.Outlined" Min="1" Margin="Margin.Dense" Class="flex-grow-0" Style="width:50px;" />
        <MudIconButton Icon="@Icons.Filled.NavigateNext" Disabled=@(transactions!.Count < pageSize) OnClick="@(() => gotoPage += 1)" />
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Tx Id</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>From</MudTh>
        <MudTh>To</MudTh>
        <MudTh Style="text-align:right">Bought</MudTh>
        <MudTh Style="text-align:right">Sold</MudTh>
        <MudTh Style="text-align:right">Fee</MudTh>
        <MudTh>Verified At (UTC)</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Transaction Id">@LinkHelper.GetObjectLink(context)</MudTd>
        <MudTd DataLabel="Type">@context.typeName</MudTd>
        <TransactionTableDetails TransactionData=@context />
        <MudTd DataLabel="Timestamp">@context.verifiedAt</MudTd>
    </RowTemplate>
</MudTable>
<br />
<MudTable Dense="true" Striped="true" Bordered="true" Items="@holders" Hover="true" Loading=@isLoadingHolders>
    <ToolBarContent>
        <MudText Typo="Typo.h6">NFT Holders</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.FirstPage" Disabled=@(goToHolderPage == 1) OnClick="@(() => goToHolderPage = 1)" />
        <MudIconButton Icon="@Icons.Filled.NavigateBefore" Disabled=@(goToHolderPage == 1) OnClick="@(() => goToHolderPage -= 1)" />
        <MudNumericField HideSpinButtons="true" @bind-Value="goToHolderPage" Label="Page" Variant="Variant.Outlined" Min="1" Margin="Margin.Dense" Class="flex-grow-0" Style="width:50px;" />
        <MudIconButton Icon="@Icons.Filled.NavigateNext" Disabled=@(holders!.Count < pageSize) OnClick="@(() => goToHolderPage += 1)" />
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Account Id</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Balance</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Account Id">@context.Account.id</MudTd>
        <MudTd DataLabel="Address">@LinkHelper.CreateUserLink(context.Account.id, context.Account.address, true)</MudTd>
        <MudTd DataLabel="Timestamp">@context.Balance</MudTd>
    </RowTemplate>
</MudTable>


@code {
    [Parameter]
    public string nftId { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    [Parameter]
    [SupplyParameterFromQuery]
    public string nftHolderPageNumber { get; set; } = "1";

    private NonFungibleToken? nft;
    private IList<Transaction>? transactions { get; set; } = new List<Transaction>();
    private IList<NftHolder>? holders { get; set; } = new List<NftHolder>();
    public bool isLoading = true;
    public bool isLoadingHolders = true;
    public readonly int pageSize = 25;

    private NftMetadata? nftMetadata;

    public int gotoPage
    {
        get
        {
            return int.Parse(pageNumber ?? "1");
        }
        set
        {
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(pageNumber), value);
            NavigationManager.NavigateTo(URL);
        }
    }

    public int goToHolderPage
    {
        get
        {
            return int.Parse(nftHolderPageNumber ?? "1");
        }
        set
        {
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(nftHolderPageNumber), value);
            NavigationManager.NavigateTo(URL);
        }
    }

    private CancellationTokenSource? cts;

    protected override async Task OnParametersSetAsync()
    {
        //cancel any previous OnParametersSetAsync which might still be running
        cts?.Cancel();

        using (CancellationTokenSource localCTS = new CancellationTokenSource())
        {
            //give future calls a chance to cancel us; it is now safe to replace
            //any previous value of cts, since we already cancelled it above
            cts = localCTS;
            try
            {
                isLoading = true;
                if (nft != null && nft.id != nftId) //did we change to another NFT?
                {
                    nft = null;
                    transactions = new List<Transaction>();
                    holders = new List<NftHolder>();
                    pageNumber = "1";
                    StateHasChanged();
                }
                if (nftId == null) return;
                if (nft == null)
                {
                    nftMetadata = null;
                    string nftCacheKey = $"nft-{nftId}";
                    nft = await AppCache.GetOrAddAsyncNonNull(nftCacheKey,
                        async () => await LoopringGraphQLService.GetNFT(nftId, localCTS.Token),
                        DateTimeOffset.UtcNow.AddHours(1));
                    if (nft == null) return;
                    StateHasChanged();
                }

                if (string.IsNullOrEmpty(pageNumber))
                {
                    pageNumber = "1";
                }

                string nftTransactionCacheKey = $"nft{nftId}-transactions-page{pageNumber}";
                transactions = await AppCache.GetOrAddAsyncNonNull(nftTransactionCacheKey,
                    async () => await LoopringGraphQLService.GetNFTTransactions((gotoPage - 1) * pageSize, pageSize, nftId, localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                isLoading = false;
                StateHasChanged();

                // Get NFT Holders
                string nftHoldersCacheKey = $"nft{nftId}-holders-page{nftHolderPageNumber}";
                holders = await AppCache.GetOrAddAsyncNonNull(nftHoldersCacheKey,
                    async () => await LoopringGraphQLService.GetNftHolders(nftId, (goToHolderPage - 1) * pageSize, pageSize, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                isLoadingHolders = false;
                StateHasChanged();
                

                //load the NFT metadata last - it might actually take the longest and other services are queried etc.
                if (nftMetadata == null)
                {
                    string nftMetadataLinkCacheKey = $"nftMetadataLink-{nft?.nftID}";
                    string? nftMetadataLink = await AppCache.GetOrAddAsyncNonNull(nftMetadataLinkCacheKey,
                        async () => await EthereumService.GetMetadataLink(nft?.nftID, nft?.token, nft?.nftType));
                    if (string.IsNullOrEmpty(nftMetadataLink)) return;

                    string nftMetadataCacheKey = $"nftMetadata-{nftMetadataLink}";
                    nftMetadata = await AppCache.GetOrAddAsyncNonNull(nftMetadataCacheKey,
                        async () => await NftMetadataService.GetMetadata(nftMetadataLink, localCTS.Token));
                    if (!string.IsNullOrEmpty(nftMetadata?.animation_url))
                    {
                        string nftMetadataContentTypeCacheKey = $"nftMetadata-contentType-{nftMetadataLink}";
                        nftMetadata!.contentType = await AppCache.GetOrAddAsyncNonNull(nftMetadataContentTypeCacheKey,
                            async () => await NftMetadataService.GetContentTypeFromURL(nftMetadata.animation_url!, localCTS.Token));
                    }
                    StateHasChanged();
                }

            }
            catch (OperationCanceledException)
            {
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.StackTrace + "\n" + e.Message);
            }
            //now for cleanup, we must clear cts, but only if it is still our localCTS, which we're about to dispose
            //otherwise a new call has already replaced cts with it's own localCTS
            Interlocked.CompareExchange<CancellationTokenSource?>(ref cts, null, localCTS);
        }
    }


    public void goToCollectionPage()
    {
        string URL = $"/nfts/collections/{nft?.token}";
        NavigationManager.NavigateTo(URL);
    }

    public void showJSON()
    {
        var parameters = new DialogParameters();
        parameters.Add("JSON", nftMetadata?.JSONContent);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        DialogService.Show<NFTMetadataDialog>("NFT metadata JSON", parameters, options);
    }

}

