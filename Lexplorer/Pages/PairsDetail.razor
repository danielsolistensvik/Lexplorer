@page "/pairs/{pairId}"
@using Lexplorer.Components;
@using Lexplorer.Helpers;
@using Lexplorer.Models;
@using System.Diagnostics
@using ApexCharts;
@inject IAppCache AppCache;
@inject NavigationManager NavigationManager;
@inject Lexplorer.Services.LoopringGraphQLService LoopringGraphQLService;


<PageTitle>The Lexplorer - pair @(pair?.token0?.symbol) / @(pair?.token1?.symbol) </PageTitle>

<MudText Typo="Typo.h6">Pair  @pair?.token0?.symbol / @pair?.token1?.symbol</MudText>
<MudSimpleTable Dense="true">
    <tbody>
        <tr>
            <td>Details</td>
            <td>Token 1</td>
            <td>Token 2</td>
        </tr>
        <tr>
            <td>Price</td>
            <td>1 @pair?.token0?.symbol = @TokenAmountConverter.ToString(pair?.token0Price, pair?.token1?.decimals) @pair?.token1?.symbol </td>
            <td>1 @pair?.token1?.symbol = @TokenAmountConverter.ToString(pair?.token1Price, pair?.token0?.decimals) @pair?.token0?.symbol </td>
        </tr>
        <tr>
            <td>Total volume</td>
            <td>@TokenAmountConverter.ToStringWithExponent(pair?.tradedVolumeToken0 ?? 0, pair?.token0?.decimals ?? 0, 1) @pair?.token0?.symbol </td>
            <td>@TokenAmountConverter.ToStringWithExponent(pair?.tradedVolumeToken1 ?? 0, pair?.token1?.decimals ?? 0, 1) @pair?.token1?.symbol </td>
        </tr>
        <tr>
            <td>Total volume swaps</td>
            <td>@TokenAmountConverter.ToStringWithExponent(pair?.tradedVolumeToken0Swap ?? 0, pair?.token0?.decimals ?? 0, 1) @pair?.token0?.symbol </td>
            <td>@TokenAmountConverter.ToStringWithExponent(pair?.tradedVolumeToken1Swap ?? 0, pair?.token1?.decimals ?? 0, 1) @pair?.token1?.symbol </td>
        </tr>
        <tr>
            <td>Total volume orderbook trades</td>
            <td>@TokenAmountConverter.ToStringWithExponent(pair?.tradedVolumeToken0Orderbook ?? 0, pair?.token0?.decimals ?? 0, 1) @pair?.token0?.symbol </td>
            <td>@TokenAmountConverter.ToStringWithExponent(pair?.tradedVolumeToken1Orderbook ?? 0, pair?.token1?.decimals ?? 0, 1) @pair?.token1?.symbol </td>
        </tr>
    </tbody>
</MudSimpleTable>

@if (dailyData != null)
{
    <MudItem lg="12" Class="mt-3">
        <ApexChart @ref="dailyChart"
                   TItem="PairDailyData"
                   Title="30 day volume"
                   Options="chartOptions">

            <ApexPointSeries TItem="PairDailyData"
                             Items="dailyData"
                             Name="Total volume"
                             XValue="@(d => d.dayDateTime)"
                             YValue="@(d => TokenAmountConverter.ToDecimal(d.tradedVolumeToken0, pair?.token0?.decimals ?? 0))"
                             SeriesType="SeriesType.Bar"
                             OrderBy="d => d.X" />
            <ApexPointSeries TItem="PairDailyData"
                             Items="dailyData"
                             Name="Swap volume"
                             XValue="@(d => d.dayDateTime)"
                             YValue="@(d => TokenAmountConverter.ToDecimal(d.tradedVolumeToken0Swap, pair?.token0?.decimals ?? 0))"
                             SeriesType="SeriesType.Bar"
                             OrderBy="d => d.X" />
            <ApexPointSeries TItem="PairDailyData"
                             Items="dailyData"
                             Name="Orderbook volume"
                             XValue="@(d => d.dayDateTime)"
                             YValue="@(d => TokenAmountConverter.ToDecimal(d.tradedVolumeToken0Orderbook, pair?.token0?.decimals ?? 0))"
                             SeriesType="SeriesType.Bar"
                             OrderBy="d => d.X" />
        </ApexChart>
    </MudItem>
}

@code {
    [Parameter]
    public string pairId { get; set; } = "";

    private Pair? pair { get; set; } = new Pair();
    private IList<PairDailyData>? dailyData { get; set; } = null;

    private ApexChart<PairDailyData>? dailyChart;
    private ApexChartOptions<PairDailyData> chartOptions = new();

    private bool __isDarkMode = false;
    [CascadingParameter]
    protected bool _isDarkMode
    {
        get
        {
            return __isDarkMode;
        }
        set
        {
            __isDarkMode = value;
            chartOptions.Theme = new Theme
            {
                Mode = _isDarkMode ? Mode.Dark : Mode.Light
            };
            dailyChart?.RenderAsync();
        }
    }

    protected override void OnInitialized()
    {
        chartOptions = new ApexChartOptions<PairDailyData>();
        chartOptions.Theme = new Theme
        {
            Mode = _isDarkMode ? Mode.Dark : Mode.Light
        };
        chartOptions.Yaxis = new List<YAxis>();
        chartOptions.Yaxis.Add(new YAxis
        {
            Labels = new YAxisLabels
            {
                //ideally implement something similar to TokenAmountConverter.ToStringWithExponent but in JS?
                //as we're server side and the chart is JS, we can't call DotNet, i.e. our code
                Formatter = @"function (value) {
                        return Number(value).toLocaleString();}"
            }
        }
        );
    }

    protected override async Task OnParametersSetAsync()
    {
        if (pair?.id != pairId)
        {
            dailyData = null;
            string pairCacheKey = $"pair-{pairId}";
            pair = await AppCache.GetOrAddAsyncNonNull(pairCacheKey,
                async () => await LoopringGraphQLService.GetPair(pairId),
                DateTimeOffset.UtcNow.AddHours(1));
            if (pair == null) return;
            StateHasChanged();
            string dailyDataCacheKey = $"pair-{pairId}-dailyData";
            dailyData = await AppCache.GetOrAddAsyncNonNull(dailyDataCacheKey,
                async () => await LoopringGraphQLService.GetPairDailyEntities(pairId, 0, 30),
                DateTimeOffset.UtcNow.AddHours(1)
                );
            StateHasChanged();
        }
    }
}