@page "/transactions/{transactionType}/{transactionId}"
@using Lexplorer.Components;
@using Lexplorer.Helpers;
@using Lexplorer.Models;
@inject IAppCache AppCache;
@inject Lexplorer.Services.GraphQLService GraphQLService;

<PageTitle>The Lexplorer - Transaction</PageTitle>

@if(transaction is Swap)
{
    <SwapTransactionDetail SwapDetails=@(transaction as Swap) />
}
else if(transaction is Transfer)
{
    <TransferTransactionDetail TransferDetails=@(transaction as Transfer) />
}
else if(transaction is OrderBookTrade)
{
    <OrderbookTradeTransactionDetail TradeDetails=@(transaction as OrderBookTrade) />
}
else if(transaction is Deposit)
{
    <DepositTransactionDetail DepositDetails=@(transaction as Deposit) />
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private Models.Transaction? transaction;

    [Parameter]
    public string transactionType { get; set; } = "";

    [Parameter]
    public string transactionId { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        string transactionCacheKey = $"transactionDetails-{transactionType}-{transactionId}";
        if (transaction == null)
        {
            transaction = await AppCache.GetOrAddAsync(transactionCacheKey, async () => await GraphQLService.GetTransaction(transactionId));
            StateHasChanged();
        }
    }
}
