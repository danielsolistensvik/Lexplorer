@page "/transaction"
@using Lexplorer.Components;
@using Lexplorer.Helpers;
@using Lexplorer.Models;
@inject Lexplorer.Services.GraphQLService GraphQLService;
@inject NavigationManager NavigationManager;

@if (transactionData != null)
{
                <MudTable Dense="true" Items="@transactionData.data.transactions" Hover="true" Loading="@isLoading">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Latest Transactions <MudText Typo="Typo.caption">Current Page: @pageNumber</MudText></MudText>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>Tx Id</MudTh>
                                    <MudTh>Type</MudTh>
                                    <MudTh>From</MudTh>
                                    <MudTh>To</MudTh>
                                    <MudTh>Amount</MudTh>
                                    <MudTh>Fee</MudTh>
                                    <MudTh>Time(UTC)</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Tx Id"><a Class="mud-theme-primary" href=@ParameterHelper.ConvertToTransactionLink(@context.typeName,@context.id, @pageNumber)>@context.id</a></MudTd>
                                    <MudTd DataLabel="Type">@context.typeName</MudTd>
                                    <TransactionTableDetails TransactionData=@context />
                                    <MudTd DataLabel="Time">@TimestampToUTCConverter.Convert(@context.block.timestamp)</MudTd>
                                </RowTemplate>
                </MudTable>
    @if (pageNumber == "0")
    {
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToNextPage">Next Page</MudButton>
    }
    else
    {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="GoToStartPage">Back to Start</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GoToPreviousPage">Previous Page</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToNextPage">Next Page</MudButton>
    }
}
else
{
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}


@code {
    private Transactions transactionData;
    [Parameter]
    [SupplyParameterFromQuery]
    public string? pageNumber { get; set; }
    public bool isLoading;

    protected override async Task OnParametersSetAsync()
    {
        if (String.IsNullOrEmpty(pageNumber))
        {
            pageNumber = "0";
        }
        isLoading = true;
        transactionData = await GraphQLService.GetTransactionsForBlock(Int32.Parse(pageNumber) * 25, 25);
        isLoading = false;
        StateHasChanged();
    }

    private void GoToNextPage()
    {
        int nextPage = Int32.Parse(pageNumber) + 1;
        string parameters = $"transaction?pageNumber={nextPage.ToString()}";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToPreviousPage()
    {
        int previousPage = Int32.Parse(pageNumber) - 1;
        string parameters = $"transaction?pageNumber={previousPage.ToString()}";
        NavigationManager.NavigateTo(parameters);
    }
    private void GoToStartPage()
    {
        string parameters = "transaction/";
        NavigationManager.NavigateTo(parameters);
    }
}
