@page "/blocks/{blockNumber}"
@using Lexplorer.Components
@using Lexplorer.Models;
@using Lexplorer.Helpers;
@inject Lexplorer.Services.GraphQLService GraphQLService;
@inject NavigationManager NavigationManager;
@inject IAppCache AppCache;

<PageTitle>The Lexplorer - Block Details</PageTitle>

@if (block != null)
{
            <MudText Typo="Typo.h6">Block #@block.data.block.id</MudText>
    if (block.data.block.id != block.data.proxy.blockCount)
    {
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToPreviousBlockPage">Previous Block</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToNextBlockPage">Next Block</MudButton>
    }
    else
    {
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToPreviousBlockPage">Previous Block</MudButton>
    }
    @if (isBlockLoading)
    {
                   <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" /> 
    }

            <MudSimpleTable Dense="true">
                        <tbody>

                            <tr>
                                <td>Block Hash</td>
                                <td>@block.data.block.blockHash</td>
                            </tr>
                            <tr>
                                <td>Block Size</td>
                                <td>@block.data.block.blockSize</td>
                            </tr>
                            <tr>
                                <td>L1 Transaction Hash</td>
                                <td><a Class="mud-theme-primary" href="https://etherscan.io/tx/@block.data.block.txHash" target="_blank">@block.data.block.txHash</a></td>
                            </tr>
                            <tr>
                                <td>Verified At (UTC)</td>
                                <td>@TimestampToUTCConverter.Convert(block.data.block.timestamp)</td>
                            </tr>
                            <tr>
                                <td>Raw Data</td>
                                <td><MudTextField T="string" Variant="Variant.Filled" ReadOnly="true" Text="@block.data.block.data" Lines="5"/></td>
                            </tr>
                        </tbody>
                    </MudSimpleTable>
}
else
{
                     <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@if (transactionData != null)
{
                <MudTable Dense="true" Items="@transactionData.data.transactions" Hover="true" Loading="@isTransactionLoading">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Transactions in block #@block.data.block.id</MudText>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>Tx Id</MudTh>
                                    <MudTh>Type</MudTh>
                                    <MudTh>From</MudTh>
                                    <MudTh>To</MudTh>
                                    <MudTh>Amount</MudTh>
                                    <MudTh>Fee</MudTh>
                                    <MudTh>Time(UTC)</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Tx Id"><a Class="mud-theme-primary" href=@ParameterHelper.ConvertToTransactionLink(@context.typeName,@context.id, @pageNumber)>@context.id</a></MudTd>
                                    <MudTd DataLabel="Type">@context.typeName</MudTd>
                                    <TransactionTableDetails TransactionData=@context />
                                    <MudTd DataLabel="Time">@TimestampToUTCConverter.Convert(@block.data.block.timestamp)</MudTd>
                                </RowTemplate>
                </MudTable>
    @if (pageNumber == "0")
    {
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToNextPage">Next Page</MudButton>
    }
    else
    {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="GoToStartPage">Back to Start</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GoToPreviousPage">Previous Page</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToNextPage">Next Page</MudButton>
    }
}
else
{
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
<MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="GoToBlocksOverviewPage">Back to Blocks Overview</MudButton>
<MudText Typo="Typo.caption">Current Page: @pageNumber</MudText>

@code {
    private Block block;
    private Transactions transactionData;

    [Parameter]
    public string blockNumber { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? pageNumber { get; set; }

    public bool isTransactionLoading;
    public bool isBlockLoading;

    protected override async Task OnParametersSetAsync()
    {
        if (String.IsNullOrEmpty(pageNumber))
        {
            pageNumber = "0";
        }
        string cacheKey = $"blockDetailOverview-{blockNumber}";

        isBlockLoading = true;
        StateHasChanged();
        block = await AppCache.GetOrAddAsync(cacheKey, async () => await GraphQLService.GetBlockDetails(Int32.Parse(blockNumber)));
        isBlockLoading = false;
        StateHasChanged();
        isTransactionLoading = true;
        StateHasChanged();
        string transactionDatacacheKey = $"blockDetailTransactions-{blockNumber}-page{pageNumber}";
        transactionData = await AppCache.GetOrAddAsync(transactionDatacacheKey, async () => await GraphQLService.GetTransactionsForBlock(Int32.Parse(pageNumber) * 10, 10, blockNumber));
        isTransactionLoading = false;
        StateHasChanged();
    }

    private void GoToBlocksOverviewPage()
    {
        string parameters = "blocks/";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToNextPage()
    {
        int nextPage = Int32.Parse(pageNumber) + 1;
        string parameters = $"blocks/{blockNumber}?pageNumber={nextPage.ToString()}";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToPreviousPage()
    {
        int previousPage = Int32.Parse(pageNumber) - 1;
        string parameters = $"blocks/{blockNumber}?pageNumber={previousPage.ToString()}";
        NavigationManager.NavigateTo(parameters);
    }
    private void GoToStartPage()
    {
        string parameters = $"blocks/{blockNumber}?pageNumber=0";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToPreviousBlockPage()
    {
        int previousBlock = Int32.Parse(blockNumber) - 1;
        string parameters = $"blocks/{previousBlock}?pageNumber={0}";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToNextBlockPage()
    {
        int nextBlock = Int32.Parse(blockNumber) + 1;
        string parameters = $"blocks/{nextBlock}?pageNumber={0}";
        NavigationManager.NavigateTo(parameters);
    }

}
