@page "/transaction/{transactionType}/{transactionId}"
@using Lexplorer.Components;
@using Lexplorer.Helpers;
@using Lexplorer.Models;
@inject IAppCache AppCache;
@inject Lexplorer.Services.GraphQLService GraphQLService;

<PageTitle>The Lexplorer - Transaction</PageTitle>

@if(swapData != null)
{
    <SwapTransactionDetail SwapDetails=@swapData />
}
else if(transferData != null)
{
    <TransferTransactionDetail TransferDetails=@transferData />
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private Swap swapData;
    private Transfer transferData;

    [Parameter]
    public string transactionType { get; set; }

    [Parameter]
    public string transactionId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        string transactionCacheKey = $"transactionDetails-{transactionType}-{transactionId}";
        if (swapData == null && transactionType == "Swap")
        {
            swapData = await AppCache.GetOrAddAsync(transactionCacheKey, async () => await GraphQLService.GetTransaction<Swap>(transactionId));
            StateHasChanged();
        }else if (transferData == null  && transactionType == "Transfer")
        {
            transferData = await AppCache.GetOrAddAsync(transactionCacheKey, async () => await GraphQLService.GetTransaction<Transfer>(transactionId));
            StateHasChanged();
        }

    }
}
