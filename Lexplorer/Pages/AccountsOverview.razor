@using System.Diagnostics;
@inject LoopringGraphQLService LoopringGraphQLService;
@inject NavigationManager NavigationManager;
@inject IAppCache AppCache;
@page "/account";

<PageTitle>The Lexplorer - Accounts</PageTitle>

<MudTable RowsPerPage="25" Dense="true" Striped="true" Bordered="true" ServerData="@(new Func<TableState, Task<TableData<Account>>>(ServerReload))" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Test</MudText>
        <MudSpacer />
        <MudSelect @bind-Value="@filterAccounts" T="string" Label="Filter by type">
            <MudSelectItem Value="@("All")" />
            <MudSelectItem Value="@("User")" />
            <MudSelectItem Value="@("Pool")" />
            <MudSelectItem Value="@("ProtocolAccount")" />
        </MudSelect>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>L1 address</MudTh>
        <MudTh>Created At (UTC)</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Account Id">@LinkHelper.GetObjectLink(context)</MudTd>
        <MudTd DataLabel="Type">@context.typeName</MudTd>
        <MudTd DataLabel="L1Address"><L1AccountLink address="@context?.address" /></MudTd>
        <MudTd DataLabel="CreatedAt">@context.createdAtTransaction?.verifiedAt</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {

    public bool isLoading = true;
    private int totalItems = 5000;
    private IEnumerable<Account>? pagedData;
    private MudTable<Account>? table;
    private string? type { get; set; }
    public string? filterAccounts
    {
        get
        {
            return type ?? "All";
        }
        set
        {
            type = string.IsNullOrWhiteSpace(value) || value == "All"
                ? null
                : value;
            OnSearch();
        }
    }

    private IList<Account>? accounts { get; set; } = new List<Account>();

    private CancellationTokenSource? cts;

    private async Task<TableData<Account>> ServerReload(TableState state)
    {
        CancellationTokenSource localCTS1 = new CancellationTokenSource();
        string accountCacheKey = $"transactions-page{state.Page}-pageSizer{state.PageSize}-type{type}2";
        accounts = await AppCache.GetOrAddAsyncNonNull(accountCacheKey,
                    async () => await LoopringGraphQLService.GetAccounts(state.Page * state.PageSize, state.PageSize, type, localCTS1.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
        await Task.Delay(300);

        // Only set totalItems on first page. Since the graph can't skip more than 5000, maximum items is set to 5000. 
        if (int.TryParse(accounts?.First().id, out int totalAccounts) && state.Page == 0)
        {
            totalItems = totalAccounts <= totalItems || totalItems == 1
                ? totalAccounts
                : 5000;

            // Special case for protocolAccount
            totalItems = totalAccounts == 0
                ? 1
                : totalItems;
        }

        pagedData = accounts!.ToArray();
        return new TableData<Account>() {TotalItems = totalItems, Items = pagedData};
    }

    private void OnSearch()
    {
        table!.ReloadServerData();
    }

}

