@page "/account/{accountId}"
@using System.Diagnostics
@inject LoopringGraphQLService LoopringGraphQLService;
@inject EthereumService EthereumService;
@inject NftMetadataService NftMetadataService;
@inject NavigationManager NavigationManager;
@inject IDialogService DialogService;
@inject IAppCache AppCache;

<PageTitle>The Lexplorer - Account</PageTitle>
<MudContainer Fixed="true" Class="px-0 extra-extra-extra-large">
    <MudSimpleTable Class="mt-3" Dense="true" Striped="true" Bordered="true">
        <div class="mud-toolbar mud-toolbar-gutters mud-table-toolbar">
            <MudText Typo="Typo.h6">@account?.typeName #@account?.id</MudText>
        </div>
        <tbody>
            <tr>
                <td>L1 Address</td>
                <td><L1AccountLink address="@account?.address" shortenAddress="false" /></td>
            </tr>
            <tr>
                <td>Account Type</td>
                <td>@account?.typeName</td>
            </tr>
            <tr>
                <td>Created At (UTC)</td>
                <td>@account?.createdAtTransaction?.verifiedAt</td>
            </tr>
            @if (account is User)
            {
                <tr>
                    <td>Public key</td>
                    <td>0x@((account as User)!.publicKey)</td>
                </tr>

            }
        </tbody>
    </MudSimpleTable>

    <br />

    <MudTabs>
        <MudTabPanel Text="Token balances">
            <MudTable Dense="true" Striped="true" Bordered="true" Items="@account?.balances" Hover="true" Loading=@balancesLoading>
                <HeaderContent>
                    <MudTh Style="text-align:right"><MudTableSortLabel SortBy="new Func<AccountTokenBalance, object>(x=>x.token!.name!)">Token</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<AccountTokenBalance, object>(x=>x.fBalance!)">Balance</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="text-align:right" DataLabel="Token">@context.token!.name</MudTd>
                    <MudTd DataLabel="Balance">@TokenAmountConverter.ToString(context.balance, context.token!.decimals) @context.token.symbol</MudTd>
                </RowTemplate>
                <PagerContent>
                    @if (account?.balances?.Count > 10)
                    {
                        <MudTablePager InfoFormat="@("{first_item}-{last_item} of {all_items}")" HorizontalAlignment="HorizontalAlignment.Left" />
                    }
                </PagerContent>
            </MudTable>
        </MudTabPanel>
        <MudTabPanel Text="NFTs">
            @if (((accountNFTSlots?.Count ?? 0) < 1) && (gotoNFTPage == 1))
            {
                <MudText>No NFTs</MudText>
            }
            else
            {
                <MudGrid>
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudToolBar>
                            <MudIconButton Icon="@Icons.Filled.FirstPage" Disabled=@(gotoNFTPage == 1) OnClick="@(() => gotoNFTPage = 1)" />
                            <MudIconButton Icon="@Icons.Filled.NavigateBefore" Disabled=@(gotoNFTPage == 1) OnClick="@(() => gotoNFTPage -= 1)" />
                            <MudNumericField HideSpinButtons="true" @bind-Value="gotoNFTPage" Label="Page" Variant="Variant.Outlined" Min="1" Margin="Margin.Dense" Class="flex-grow-0" Style="width:50px;" />
                            <MudIconButton Icon="@Icons.Filled.NavigateNext" Disabled=@(accountNFTSlots?.Count < nftPageSize) OnClick="@(() => gotoNFTPage += 1)" />
                        </MudToolBar>
                    </MudItem>
                    @foreach (var slot in accountNFTSlots!)
                    {
                        var metaData = GetMetadata(slot.nft?.id);
                        <MudItem xs="12" sm="4" md="4" lg="2">
                            <MudCard Style="height:100%;position:relative">
                                <MudCardMedia Image="@metaData?.imageURL" Style="object-fit:contain" />
                                <MudCardContent>
                                    <MudText Typo="Typo.h6">@metaData?.name</MudText>
                                    <MudChip Label="true" Color="Color.Primary" Class="ml-0">x @slot.balance.ToString("#,##0")</MudChip>
                                    <MudText Typo="Typo.body2">@metaData?.description</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Style="position:absolute;bottom:0;" Variant="Variant.Text" Color="Color.Primary" Link=@LinkHelper.GetObjectLinkAddress(slot.nft)?.Item1>Go to NFT</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudTabPanel>
    </MudTabs>

    <br />

    <MudTable Dense="true" Striped="true" Bordered="true" Items="@transactions" Hover="true" Loading=@isLoading>
        <ToolBarContent>
            <MudText Typo="Typo.h6">Transactions</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Filled.FirstPage" Disabled=@(gotoPage == 1) OnClick="@(() => gotoPage = 1)" />
            <MudIconButton Icon="@Icons.Filled.NavigateBefore" Disabled=@(gotoPage == 1) OnClick="@(() => gotoPage -= 1)" />
            <MudNumericField HideSpinButtons="true" @bind-Value="gotoPage" Label="Page" Variant="Variant.Outlined" Min="1" Margin="Margin.Dense" Class="flex-grow-0" Style="width:50px;" />
            <MudIconButton Icon="@Icons.Filled.NavigateNext" Disabled=@(transactions!.Count < pageSize) OnClick="@(() => gotoPage += 1)" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Filled.Download" OnClick="ShowCSVOptions" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Tx Id</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>From</MudTh>
            <MudTh>To</MudTh>
            <MudTh Style="text-align:right">Bought</MudTh>
            <MudTh Style="text-align:right">Sold</MudTh>
            <MudTh Style="text-align:right">Fee</MudTh>
            <MudTh>Verified At (UTC)</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Transaction Id">@LinkHelper.GetObjectLink(context)</MudTd>
            <MudTd DataLabel="Type">@context.typeName</MudTd>
            <TransactionTableDetails TransactionData=@context ignoreUserIDForLink=@accountId />
            <MudTd DataLabel="Timestamp">@context.verifiedAt</MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>


@code {
    [Parameter]
    public string? accountId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    public int gotoPage
    {
        get
        {
            return int.TryParse(pageNumber, out int np) ? np : 1;
        }
        set
        {
            string URL = $"/account/{accountId}?pageNumber={value}&nftPageNumber={nftPageNumber}";
            NavigationManager.NavigateTo(URL);
        }
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public string nftPageNumber { get; set; } = "1";

    public int gotoNFTPage
    {
        get
        {
            return int.TryParse(nftPageNumber, out int np) ? np : 1;
        }
        set
        {
            string URL = $"/account/{accountId}?pageNumber={pageNumber}&nftPageNumber={value}";
            NavigationManager.NavigateTo(URL);
        }
    }

    public bool balancesLoading;
    public bool isLoading = true;
    public readonly int pageSize = 25;
    public readonly int nftPageSize = 12; //6 per row

    private Account? account { get; set; }
    private IList<Transaction>? transactions { get; set; } = new List<Transaction>();
    private IList<AccountNFTSlot>? accountNFTSlots { get; set; }
    private Dictionary<string, NftMetadata> NFTdata { get; set; } = new Dictionary<string, NftMetadata>();
    private CancellationTokenSource? cts;

    protected override async Task OnParametersSetAsync()
    {
        //cancel any previous OnParametersSetAsync which might still be running
        cts?.Cancel();

        using (CancellationTokenSource localCTS = new CancellationTokenSource())
        {
            //give future calls a chance to cancel us; it is now safe to replace
            //any previous value of cts, since we already cancelled it above
            cts = localCTS;
            try
            {
                isLoading = true;
                //did the account change?
                if (account != null && account.id != accountId)
                {
                    account = null;
                    transactions = new List<Transaction>();
                    accountNFTSlots = null;
                    pageNumber = "1";
                    nftPageNumber = "1";
                    StateHasChanged();
                }
                if (accountId == null) return;
                if (account == null)
                {
                    balancesLoading = true;
                    account = await LoopringGraphQLService.GetAccount(accountId, localCTS.Token);
                    localCTS.Token.ThrowIfCancellationRequested();
                    if (account == null) return;
                    StateHasChanged();
                    account!.balances = await LoopringGraphQLService.GetAccountBalance(accountId, localCTS.Token);
                    localCTS.Token.ThrowIfCancellationRequested();
                    balancesLoading = false;
                    StateHasChanged();
                }
                if (string.IsNullOrEmpty(pageNumber))
                {
                    pageNumber = "1";
                }

                string transactionCacheKey = $"account{accountId}-transactions-page{pageNumber}";
                transactions = await AppCache.GetOrAddAsyncNonNull(transactionCacheKey,
                    async () => await LoopringGraphQLService.GetAccountTransactions((gotoPage - 1) * pageSize, pageSize, accountId, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                localCTS.Token.ThrowIfCancellationRequested();
                StateHasChanged();

                string nftCacheKey = $"account{accountId}-nftSlots-page{nftPageNumber}";
                accountNFTSlots = await AppCache.GetOrAddAsyncNonNull(nftCacheKey,
                    async () => await LoopringGraphQLService.GetAccountNFTs((gotoNFTPage - 1) * nftPageSize, nftPageSize, accountId, localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                localCTS.Token.ThrowIfCancellationRequested();

                Dictionary<string, NftMetadata> localNFTdata = new Dictionary<string, NftMetadata>();
                NFTdata = localNFTdata;

                if (accountNFTSlots != null)
                {
                    StateHasChanged();
                    foreach (var slot in accountNFTSlots!)
                    {
                        string nftMetadataLinkCacheKey = $"nftMetadataLink-{slot.nft!.nftID}";
                        string? nftMetadataLink = await AppCache.GetOrAddAsyncNonNull(nftMetadataLinkCacheKey,
                            async () => await EthereumService.GetMetadataLink(slot.nft?.nftID, slot.nft?.token, slot.nft?.nftType),
                            DateTimeOffset.UtcNow.AddHours(1));
                        if (string.IsNullOrEmpty(nftMetadataLink)) continue;

                        string nftMetadataCacheKey = $"nftMetadata-{nftMetadataLink}";
                        var nftMetadata = await AppCache.GetOrAddAsyncNonNull(nftMetadataCacheKey,
                            async () => await NftMetadataService.GetMetadata(nftMetadataLink, localCTS.Token),
                            DateTimeOffset.UtcNow.AddHours(1));
                        localCTS.Token.ThrowIfCancellationRequested();
                        if (nftMetadata == null) continue;

                        localNFTdata.Add(slot.nft!.id!, nftMetadata);
                        StateHasChanged();
                    }
                }
                isLoading = false;
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.StackTrace + "\n" + e.Message);
            }
            //now for cleanup, we must clear cts, but only if it is still our localCTS, which we're about to dispose
            //otherwise a new call has already replaced cts with it's own localCTS
            Interlocked.CompareExchange<CancellationTokenSource?>(ref cts, null, localCTS);
        }
    }

    private NftMetadata? GetMetadata(string? nftID)
    {
        NftMetadata? data = null;
        if (nftID != null)
        {
            NFTdata.TryGetValue(nftID, out data);
        }
        return data;
    }

    private void ShowCSVOptions()
    {
        var parameters = new DialogParameters();
        parameters.Add("accountId", accountId);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        DialogService.Show<TransactionExportDialog>("Export", parameters, options);
    }
}
