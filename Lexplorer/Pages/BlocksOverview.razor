@page "/blocks"
@using Lexplorer.Models
@using Lexplorer.Helpers
@inject Lexplorer.Services.GraphQLService GraphQLService;
@inject NavigationManager NavigationManager;

<PageTitle>The Lexplorer - Blocks</PageTitle>

@if (blockData != null)
{
    <MudGrid>
        <MudItem sm="12">
            <MudText Typo="Typo.h6">Latest Blocks</MudText>
            <MudTable Dense="true" Items="@blockData.data.blocks" Hover="true" Loading="@isLoading">
                <HeaderContent>
                    <MudTh>Block ID</MudTh>
                    <MudTh>L1 Transaction Hash</MudTh>
                    <MudTh>Block Size</MudTh>
                    <MudTh>Time(UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Block Id"><a Class="mud-theme-primary" href="blocks/@context.id?pageNumber=0">@context.id</a></MudTd>
                    <MudTd DataLabel="L1 Tx"><a Class="mud-theme-primary" href="https://etherscan.io/tx/@context.txHash" target="_blank">@context.txHash.Substring(0,15)...</a></MudTd>
                    <MudTd DataLabel="Block Size">@context.blockSize</MudTd>
                    <MudTd DataLabel="Timestamp">@TimestampToUTCConverter.Convert(@context.timestamp)</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
    if (pageNumber != "0")
    {
        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="GoToStartPage">Back to Start</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GoToPreviousPage">Previous Page</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToNextPage">Next Page</MudButton>
        <MudText Typo="Typo.caption">Current Page: @pageNumber</MudText>
    }
    else
    {
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoToNextPage">Next Page</MudButton>
        <MudText Typo="Typo.caption">Current Page: @pageNumber</MudText>
    }
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private Blocks blockData;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? pageNumber { get; set; }

    public bool isLoading;

    protected override async Task OnParametersSetAsync()
    {
        if (String.IsNullOrEmpty(pageNumber))
        {
            pageNumber = "0";
        }
        isLoading = true;
        blockData = await GraphQLService.GetBlocks(Int32.Parse(pageNumber) * 25, 25);
        isLoading = false;
        StateHasChanged();
    }

    private void GoToNextPage()
    {
        int nextPage = Int32.Parse(pageNumber) + 1;
        string parameters = $"blocks?pageNumber={nextPage.ToString()}";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToPreviousPage()
    {
        int previousPage = Int32.Parse(pageNumber) - 1;
        string parameters = $"blocks?pageNumber={previousPage.ToString()}";
        NavigationManager.NavigateTo(parameters);
    }
    private void GoToStartPage()
    {
        string parameters = "blocks/";
        NavigationManager.NavigateTo(parameters);
    }
}
